PARSING

	Correct formats
		file1 cmd
		file1 cmd file2
		here_doc LIM cmd file2
		file1 cmd1 cmd2 [cmdn] file2
		here_doc LIM cmd1 cmd2 [cmdn] file2
		file1 cmd1 cmd2 [cmdn] file2 -a
	Incorrect formats
		file1 cmd -a


ISSUES
	-	For bonus part, -a flag is not required when here_doc is given.
	-	~ char not handled on path
	-	'.' as a command is accepted. What does that mean ?
		-	May need to check if path is a file and not a directory
		-	Need to use open for that.

CASES
	-	if no access to in_file
		- 1st command IS NOT EXECUTED
	-	if no access to out_file
		- last command is NOT EXECUTED
	-	every command in betweem is executed
	*** < file1 > file2 ***
		Means that empty command are accepted.
	-	For each pipe, the stdin is redirected
		-	As long as a correct pipe is given.
			- if no pipe is given, command will have empty empty input
	-	For each pipe, stdout is redirected
		-	If the command is correct
			- If command is invalid, no pipe will be given to ```stdout```.
	- If no access to in_file, 1st command is NOT executed
		- AND first stdout is empty.
	- If no access to out_file, last command is NOT executed
	-	What happen if in or out are std ?


LATER FOR MINISHELL
	Check
		< file1 | > file3 |  > file2
		Seems equivalent to
			echo 458 > file2 > file2.
				-	All fd are dup then equals the same.
		!!!! DEPEND ON THE TERMINAL USED !!!!!


/home/npirard/bin:/home/npirard/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
https://unix.stackexchange.com/questions/222333/behaviour-of-pipe-in-linux-with-output-redirection

valgrind -s --log-file="loglog" --leak-check=full  --track-fds=yes --trace-children=yes ./pipex "in" "cat -e" "wc -c" "out"


for each command :


- fork
- create pipe
for child =>
	- if !old_fd && first_command
		- if check file_in
			- dup std_in to file_in
		- else
			- next_command
	- else
		- dup stdin to old_fd[1]
	- if last command
		- if check file_out
			- dup stdout to file_out
	- else
		- dup stdout to fd[1]
	- if (!exec command)
		- close old_fd[1] ?
		- exit
for parent =>
	- next_command(fd)

